/*
 * ===================================================================
 * M√ìDULO DE DADOS ADMINISTRATIVOS - PROJETO CAF√â QUENTE
 * ===================================================================
 * 
 * Este arquivo cont√©m todos os dados relacionados √† administra√ß√£o do sistema de totem.
 * Ele funciona como uma "base de dados" simples em mem√≥ria, armazenando informa√ß√µes
 * sobre usu√°rios administradores, configura√ß√µes do sistema e dados de refer√™ncia.
 * 
 * IMPORTANTE: Em um sistema de produ√ß√£o real, essas informa√ß√µes estariam em um
 * banco de dados seguro, n√£o em um arquivo JavaScript. Este √© apenas um exemplo
 * para desenvolvimento e demonstra√ß√£o.
 * 
 * ESTRUTURA DO ARQUIVO:
 * 1. Dados dos administradores (usu√°rios que podem acessar o painel)
 * 2. Configura√ß√µes gerais do sistema
 * 3. Categorias de produtos dispon√≠veis
 * 4. Status poss√≠veis para pedidos
 * 5. M√©todos de pagamento aceitos
 */

/*
 * DADOS DOS ADMINISTRADORES
 * ========================
 * 
 * Esta lista cont√©m todos os usu√°rios que t√™m permiss√£o para acessar o painel
 * administrativo do totem. Cada administrador tem:
 * - usuarioAdm: Nome de usu√°rio para login
 * - senhaAdmin: Senha para login (em produ√ß√£o, seria criptografada!)
 * - role: Fun√ß√£o/cargo do administrador (usado para controle de permiss√µes)
 * 
 * COMO FUNCIONA:
 * Quando algu√©m tenta fazer login no painel administrativo, o sistema verifica
 * se o usu√°rio e senha digitados existem nesta lista. Se existir, o login √©
 * permitido; caso contr√°rio, √© negado.
 */
const adminData = [{
        usuarioAdm: 'Camavinga', // Nome de usu√°rio
        senhaAdmin: '12345', // Senha (NUNCA fa√ßa isso em produ√ß√£o!)
        role: 'Apoiador Moral' // Fun√ß√£o/cargo
    },
    {
        usuarioAdm: 'wl',
        senhaAdmin: '731',
        role: 'Pr√© Programador'
    },
    {
        usuarioAdm: 'jh',
        senhaAdmin: 'zeDamanga',
        role: 'Gestor de C√≥digo'
    },
    {
        usuarioAdm: 'admin',
        senhaAdmin: 'admin123',
        role: 'Super Administrador'
    }
];

/*
 * CONFIGURA√á√ïES DO SISTEMA
 * ========================
 * 
 * Este objeto cont√©m configura√ß√µes gerais que controlam o comportamento
 * do sistema de totem. Essas configura√ß√µes podem ser usadas tanto pelo
 * backend quanto pelo frontend para personalizar a experi√™ncia.
 * 
 * PROPRIEDADES:
 * - appName: Nome da aplica√ß√£o (exibido na interface)
 * - version: Vers√£o atual do software
 * - maxLoginAttempts: Quantas tentativas de login incorretas s√£o permitidas
 * - sessionTimeout: Tempo em minutos que uma sess√£o fica ativa
 * - supportedLanguages: Idiomas suportados pelo sistema
 * - themes: Temas visuais dispon√≠veis
 */
const systemConfig = {
    appName: 'Sistema de Gest√£o do Totem Caf√© Quente',
    version: '1.0.0',
    maxLoginAttempts: 3, // Ap√≥s 3 tentativas erradas, bloqueia temporariamente
    sessionTimeout: 30, // Sess√£o expira em 30 minutos de inatividade
    supportedLanguages: ['pt-BR', 'en-US', 'es-ES'],
    themes: ['light', 'dark']
};

/*
 * CATEGORIAS DE PRODUTOS
 * ======================
 * 
 * Define as categorias de produtos que podem ser vendidos no totem.
 * Cada categoria tem um ID √∫nico, nome amig√°vel e um √≠cone emoji.
 * 
 * COMO √â USADO:
 * - No painel administrativo: Para organizar produtos por categoria
 * - No totem do cliente: Para exibir produtos organizados por tipo
 * - Na valida√ß√£o: Para garantir que produtos sejam adicionados a categorias v√°lidas
 */
const productCategories = [{
        id: 'lanche', // Identificador √∫nico da categoria
        nome: 'Lanche', // Nome exibido para o usu√°rio
        icone: 'üçî' // √çcone emoji para representar a categoria
    },
    {
        id: 'bebida',
        nome: 'Bebida',
        icone: 'ü•§'
    },
    {
        id: 'acompanhamento',
        nome: 'Acompanhamento',
        icone: 'üçü'
    },
    {
        id: 'sobremesa',
        nome: 'Sobremesa',
        icone: 'üç∞'
    }
];

/*
 * STATUS DE PEDIDOS
 * =================
 * 
 * Define todos os poss√≠veis status que um pedido pode ter durante seu ciclo de vida.
 * Cada status tem nome amig√°vel, cor para exibi√ß√£o e √≠cone representativo.
 * 
 * FLUXO T√çPICO DE UM PEDIDO:
 * 1. selecting (cliente escolhendo produtos)
 * 2. payment (processando pagamento)
 * 3. preparing (cozinha preparando)
 * 4. ready (pronto para retirada)
 * 5. completed (entregue ao cliente)
 * 
 * COMO √â USADO:
 * - Interface do totem: Para mostrar o progresso do pedido ao cliente
 * - Painel administrativo: Para acompanhar pedidos em tempo real
 * - Sistema de cozinha: Para organizar a fila de produ√ß√£o
 */
const orderStatus = {
    selecting: {
        nome: 'Selecionando', // Nome amig√°vel do status
        cor: '#ffc107', // Cor amarela (aten√ß√£o)
        icone: 'üõí' // √çcone de carrinho de compras
    },
    payment: {
        nome: 'Pagamento',
        cor: '#17a2b8', // Cor azul (informa√ß√£o)
        icone: 'üí≥'
    },
    preparing: {
        nome: 'Preparando',
        cor: '#fd7e14', // Cor laranja (em progresso)
        icone: 'üë®‚Äçüç≥'
    },
    ready: {
        nome: 'Pronto',
        cor: '#20c997', // Cor verde claro (quase conclu√≠do)
        icone: '‚úÖ'
    },
    completed: {
        nome: 'Conclu√≠do',
        cor: '#28a745', // Cor verde (sucesso)
        icone: 'üì¶'
    },
    cancelled: {
        nome: 'Cancelado',
        cor: '#dc3545', // Cor vermelha (erro/cancelamento)
        icone: '‚ùå'
    }
};

/*
 * M√âTODOS DE PAGAMENTO
 * ====================
 * 
 * Lista todos os m√©todos de pagamento aceitos pelo totem.
 * Cada m√©todo tem ID √∫nico, nome amig√°vel e √≠cone representativo.
 * 
 * COMO √â USADO:
 * - Interface do totem: Para exibir op√ß√µes de pagamento ao cliente
 * - Processamento de pagamento: Para validar o m√©todo escolhido
 * - Relat√≥rios: Para analisar prefer√™ncias de pagamento dos clientes
 */
const paymentMethods = [{
        id: 'credit', // Identificador √∫nico do m√©todo
        nome: 'Cart√£o de Cr√©dito', // Nome exibido ao cliente
        icone: 'üí≥' // √çcone representativo
    },
    {
        id: 'debit',
        nome: 'Cart√£o de D√©bito',
        icone: 'üí≥'
    },
    {
        id: 'pix',
        nome: 'PIX',
        icone: 'üì±'
    },
    {
        id: 'cash',
        nome: 'Dinheiro',
        icone: 'üíµ'
    }
];

/*
 * EXPORTA√á√ÉO DOS M√ìDULOS
 * ======================
 * 
 * Torna todos os dados dispon√≠veis para outros arquivos do projeto.
 * Usando module.exports (padr√£o CommonJS) para compatibilidade com o
 * estilo do projeto Caf√© Quente.
 */
module.exports = {
    adminData,
    systemConfig,
    productCategories,
    orderStatus,
    paymentMethods
};